name: Deploy to EC2

on:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4
      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
#      - name: application.yml 파일 만들기
#        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml
#      - name: .env 파일 만들기
#        run: echo "${{ secrets.ENV }}" > .env
      - name: 테스트 및 빌드하기
        run: |
          sudo chmod +x gradlew
          ./gradlew clean build
      - name: compose.yml에서 사용할 환경변수 생성
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .composeenv
      - name: Github Repository Pull check
        run: |
          pwd
          ls -al
      - name: SCP로 EC2에 compose.yml 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: compose.yml
          target: /home/ubuntu/compose/
      # scp 에서 숨김파일을 보내려면 경로를 명시적으로 다 적어줘야함
      - name: SCP로 EC2에 .composeenv 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ./.composeenv
          target: /home/ubuntu/compose/
      - name: Docker 로그인
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Docker 이미지 빌드 및 DOCKERHUB으로 PUSH
        run : |
          docker build -t ${{secrets.DOCKER_USERNAME}}/myspringapp .
          docker push ${{secrets.DOCKER_USERNAME}}/myspringapp:latest
          docker build -t ${{secrets.DOCKER_USERNAME}}/mynginx ./nginx
          docker push ${{secrets.DOCKER_USERNAME}}/mynginx:latest
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        env:
          COMPOSE: "/home/ubuntu/compose/compose.yml"
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: COMPOSE
          script_stop: true
          # 기존에 compose.yml에 연결된 컨테이너 중지 및 이미지 삭제후
          # 새롭게 이미지 다운로드 받아서 compose.yml 기준으로 다시 컨테이너 생성
          # --build 옵션을 통해 항상 이미지 새롭게 빌드하도록 함(프로젝트 갱신된 내용 반영위해)
          script: |
            sudo docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
            sudo docker compose --env-file /home/ubuntu/compose/.composeenv -f $COMPOSE down --rmi all
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/myspringapp
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/mynginx
            echo ${{ secrets.ENV }} | sudo tee /home/ubuntu/compose/env.properties > /dev/null
            sudo docker compose --env-file /home/ubuntu/compose/.composeenv -f $COMPOSE up --build -d